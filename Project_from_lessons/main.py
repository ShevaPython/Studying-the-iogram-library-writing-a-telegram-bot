from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from config import TOKEN
from stikers_cat import emoji_cat
from random import choice
from keyboards import kb, kb_photo, kb_joke
from help_command import HELP_COMMAND
from parse_photo import smile
from parse_joke import jokes
import logging

logging.basicConfig(level=logging.INFO)
bot = Bot(TOKEN)
db = Dispatcher(bot)

new_smile_photo = smile.copy()
new_jokes = jokes.copy()


async def on_start_up(_):
    print("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


@db.message_handler(Text(equals="–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º ü§ô"))
async def command_start(message: types.Message):
    await message.answer(
        text=F"–ü—Ä–∏–≤–µ—Ç ü•≥"
             F"–∑–∞–π–¥–∏ –∫–æ –º–Ω–µ  ‚û°Ô∏è @Good_teletele_bot –ò –Ω–∞—á–Ω–µ–º –æ–±—â–∞—Ç—å—Å—è ‚úÖ"
        ,
    reply_markup=kb)
    await message.delete()


@db.message_handler(Text(equals="Help üÜò"))
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=HELP_COMMAND,
                           parse_mode='HTML')
    await message.delete()


@db.message_handler(Text(equals="giv_cat üòΩ"))
async def giv_cat(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=F"–°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π —Å–º–µ—à–Ω–æ–π –∫–æ—Ç üòΩ"
                           )
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker=choice(emoji_cat))
    await message.delete()


@db.message_handler(Text(equals="description üëÄ"))
async def command_descriptions(message: types.Message):
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker='CAACAgIAAxkBAAEHh7Fj2Sf4gLEBGA7xgulqRXnzsCXGPwACCwMAAm2wQgN_tBzazKZEJS0E')
    await bot.send_message(chat_id=message.from_user.id,
                           text=F"–î–ª—è —Ç–µ–±—è  {message.from_user.full_name} –Ø –ø–æ–∫–æ—Ä–Ω—ã–π —Å–ª—É–≥–∞!))")
    await message.delete()


@db.message_handler(Text(equals="random_photo üé≤"))
async def random_photo(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=F"–ß—Ç–æ-–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞–∂–º–∏ '–†–∞–Ω–¥–æ–ºüé≤' "
                                F"–ß—Ç–æ-–±—ã –≤—ã–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ú–µ–Ω—é‚è™",
                           reply_markup=kb_photo)
    await message.delete()


@db.message_handler(Text(equals="–ú–µ–Ω—é‚è™"))
async def open_kb_menu(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=F"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é ‚úÖ",
                           reply_markup=kb)
    await message.delete()


@db.message_handler(Text(equals="–†–∞–Ω–¥–æ–ºüé≤"))
async def open_random_photo(message: types.Message):
    global new_smile_photo
    try:
        if new_smile_photo:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=F"–í–æ—Ç –ø–æ–æ—Ä–∏ —Å —ç—Ç–∏—Ö –∏–¥–∏–æ—Ç–æ–≤)))"
                                        F"–û—Å—Ç–∞–ª–æ—Å—å {len(new_smile_photo)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π üì∑",
                                   reply_markup=kb_photo)

            await bot.send_photo(chat_id=message.from_user.id,
                                 photo=new_smile_photo[0])
            await message.delete()

            del new_smile_photo[0]

        else:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=F"–ü–æ–∂–∞–ª—É–π –ø–æ–∫–∞ –≤—Å–µ –æ—Å—Ç–≤–ª–æ—Å—å {len(new_smile_photo)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π üì∑"
                                        F"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æüòÇ –Ω–∞–∂–º–∏ random_photo üé≤",
                                   reply_markup=kb)
            new_smile_photo = smile.copy()

    except IndexError as err:
        print("list index out of range",err)
@db.message_handler(Text(equals="–•–æ—á—É –∞–Ω–µ–∫–¥–æ—Ç ü´∞"))
async def open_random_jokes(message: types.Message):
    global new_jokes
    if new_jokes:
        await bot.send_message(chat_id=message.from_user.id,
                               text=F"–ù—É –ª–æ–≤–∏ üôå üòõüòõüòõ\n"
                                    F"\n"
                                    F"{new_jokes[0]}",
                               reply_markup=kb_joke)

        await message.delete()

        del new_jokes[0]

    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text=F"–ü–æ–∂–∞–ª—É–π –ø–æ–∫–∞ –≤—Å–µ –æ—Å—Ç–≤–ª–æ—Å—å {len(new_jokes)} –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ üòÇ"
                                    F"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æüòÇ –Ω–∞–∂–º–∏ jokes üòÇ",
                               reply_markup=kb)
        new_jokes = jokes.copy()


@db.message_handler(Text(equals="jokes üòÇ"))
async def random_photo(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=F"–ß—Ç–æ-–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞–∂–º–∏—Ç–µ –•–æ—á—É –∞–Ω–µ–∫–¥–æ—Ç ü´∞ \n "
                                F"–ß—Ç–æ-–±—ã –≤—ã–π—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –ú–µ–Ω—é‚è™",
                           reply_markup=kb_joke)
    await message.delete()


if __name__ == "__main__":
    executor.start_polling(db, skip_updates=True,
                           on_startup=on_start_up)
